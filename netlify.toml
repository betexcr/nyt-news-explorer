[build]
  # Build command
  command = "bun run build"
  
  # Directory to publish
  publish = "build"
  
  # Functions directory
  functions = "netlify/functions"

[build.environment]
  # Node.js version
  NODE_VERSION = "18"
  
  # Build optimizations
  GENERATE_SOURCEMAP = "false"
  NODE_ENV = "production"

# Headers for security and caching
[[headers]]
  for = "/*"
  [headers.values]
    X-Frame-Options = "DENY"
    X-Content-Type-Options = "nosniff"
    X-XSS-Protection = "1; mode=block"
    Referrer-Policy = "strict-origin-when-cross-origin"
    Permissions-Policy = "camera=(), microphone=(), geolocation=()"
    Strict-Transport-Security = "max-age=31536000; includeSubDomains"

# Cache static assets aggressively
[[headers]]
  for = "/static/*"
  [headers.values]
    Cache-Control = "public, max-age=31536000, immutable"
    Vary = "Accept-Encoding"

# Cache images with long TTL
[[headers]]
  for = "*.jpg"
  [headers.values]
    Cache-Control = "public, max-age=31536000"
    Vary = "Accept-Encoding"

[[headers]]
  for = "*.jpeg"
  [headers.values]
    Cache-Control = "public, max-age=31536000"
    Vary = "Accept-Encoding"

[[headers]]
  for = "*.png"
  [headers.values]
    Cache-Control = "public, max-age=31536000"
    Vary = "Accept-Encoding"

[[headers]]
  for = "*.webp"
  [headers.values]
    Cache-Control = "public, max-age=31536000"
    Vary = "Accept-Encoding"

[[headers]]
  for = "*.avif"
  [headers.values]
    Cache-Control = "public, max-age=31536000"
    Vary = "Accept-Encoding"

[[headers]]
  for = "*.svg"
  [headers.values]
    Cache-Control = "public, max-age=31536000"
    Vary = "Accept-Encoding"

# Cache fonts
[[headers]]
  for = "*.woff"
  [headers.values]
    Cache-Control = "public, max-age=31536000"
    Vary = "Accept-Encoding"

[[headers]]
  for = "*.woff2"
  [headers.values]
    Cache-Control = "public, max-age=31536000"
    Vary = "Accept-Encoding"

[[headers]]
  for = "*.ttf"
  [headers.values]
    Cache-Control = "public, max-age=31536000"
    Vary = "Accept-Encoding"

# Cache CSS and JS
[[headers]]
  for = "*.css"
  [headers.values]
    Cache-Control = "public, max-age=31536000, immutable"
    Vary = "Accept-Encoding"

[[headers]]
  for = "*.js"
  [headers.values]
    Cache-Control = "public, max-age=31536000, immutable"
    Vary = "Accept-Encoding"

# Cache HTML with shorter TTL for updates
[[headers]]
  for = "*.html"
  [headers.values]
    Cache-Control = "public, max-age=3600, must-revalidate"
    Vary = "Accept-Encoding"

# Cache API responses
[[headers]]
  for = "/api/*"
  [headers.values]
    Cache-Control = "public, max-age=300, s-maxage=300"
    Vary = "Accept-Encoding"

# Exclude service worker and static assets from SPA redirect
[[redirects]]
  from = "/sw.js"
  to = "/sw.js"
  status = 200
  force = true

[[redirects]]
  from = "/static/*"
  to = "/static/:splat"
  status = 200
  force = true

[[redirects]]
  from = "/*.js"
  to = "/:splat"
  status = 200
  force = true

[[redirects]]
  from = "/*.css"
  to = "/:splat"
  status = 200
  force = true

[[redirects]]
  from = "/*.png"
  to = "/:splat"
  status = 200
  force = true

[[redirects]]
  from = "/*.jpg"
  to = "/:splat"
  status = 200
  force = true

[[redirects]]
  from = "/*.webp"
  to = "/:splat"
  status = 200
  force = true

[[redirects]]
  from = "/*.avif"
  to = "/:splat"
  status = 200
  force = true

# Redirects for SPA (catch-all for HTML routes)
[[redirects]]
  from = "/*"
  to = "/index.html"
  status = 200

# Edge functions for dynamic content
[functions]
  # Enable edge functions
  directory = "netlify/edge-functions"

# Image optimization
[build.processing]
  skip_processing = false

[build.processing.css]
  bundle = true
  minify = true

[build.processing.js]
  bundle = true
  minify = true

[build.processing.html]
  pretty_urls = true

[build.processing.images]
  compress = true

# Plugin configuration
[[plugins]]
  package = "@netlify/plugin-lighthouse"

  [plugins.inputs.thresholds]
    performance = 0.3
    accessibility = 0.9
    best-practices = 0.8
    seo = 0.8

# Environment variables for different branches
[context.production.environment]
  NODE_ENV = "production"

[context.deploy-preview.environment]
  NODE_ENV = "development"

[context.branch-deploy.environment]
  NODE_ENV = "development"